generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  // output        = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  fullName    String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  role        String        @default("FINANCE")
  surname     String
  status      String        @default("ACTIVE")
  AuditLog    AuditLog[]
  Transaction Transaction[]
}

model Branch {
  id          Int           @id @default(autoincrement())
  name        String
  location    String
  employees   Int
  manager     String
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  resource  String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Currency {
  base      String
  target    String
  rate      Float
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())

  @@unique([base, target], name: "base_target")
}

model ExpenseCategory {
  id          Int           @id @default(autoincrement())
  label       String        @unique
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Transaction {
  id                Int             @id @default(autoincrement())
  branchId          Int
  expenseCategoryId Int
  currency          String
  value             Float
  description       String?
  createdAt         DateTime        @default(now())
  valueInEur        Float?
  userId            Int
  branch            Branch          @relation(fields: [branchId], references: [id])
  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model IPWhitelist {
  id          Int      @id @default(autoincrement())
  ip          String   @unique
  description String?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
